from rest_framework import serializers
from .models import Conversation, ChatMessage




from rest_framework import serializers
from .models import ChatMessage

class ReplySerializer(serializers.ModelSerializer):
    class Meta:
        model = ChatMessage
        fields = ['id', 'sender', 'content', 'attachment', 'timestamp', 'edited']

class ChatMessageSerializer(serializers.ModelSerializer):
    replies = ReplySerializer(many=True, read_only=True)

    class Meta:
        model = ChatMessage
        fields = ['id', 'sender', 'content', 'attachment', 'timestamp', 'edited', 'replies', 'reply_to']
    
    def update(self, instance, validated_data):
        # Update the `edited` field when the content is modified
        if 'content' in validated_data:
            validated_data['edited'] = True
        return super().update(instance, validated_data)

    def to_representation(self, instance):
        representation = super().to_representation(instance)
    
    # Ensure that representation for replies is not returned as None
        if not instance.reply_to:
            replies = instance.replies.all()
            representation['replies'] = ReplySerializer(replies, many=True).data

        return representation



class ConversationSerializer(serializers.ModelSerializer):
    messages = ChatMessageSerializer(many=True, read_only=True)
    class Meta:
        model = Conversation
        fields = '__all__'

class CreateChatRoomSerializer(serializers.Serializer):
    gofer_id = serializers.IntegerField(required=False)
    vendor_id = serializers.IntegerField(required=False)
    progofer_id = serializers.IntegerField(required=False)
    errand_boy_id = serializers.IntegerField(required=False)

    def validate(self, data):
        participant_ids = [data.get('gofer_id'), data.get('vendor_id'), data.get('progofer_id'), data.get('errand_boy_id')]
        count = sum(1 for participant_id in participant_ids if participant_id)
        if count != 1:
            raise serializers.ValidationError('Exactly one participant (gofer, vendor, errandboy, or progofer) must be specified.')
        return data